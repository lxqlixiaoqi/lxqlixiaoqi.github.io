// JSONBin.io Êó•ËÆ∞ÈÖçÁΩÆ
const weatherEmoji = {
  sunny: '‚òÄÔ∏è',
  cloudy: '‚òÅÔ∏è',
  rainy: 'üåßÔ∏è',
  snowy: '‚ùÑÔ∏è'
};

const moodEmoji = {
  happy: 'üòä',
  sad: 'üò¢',
  angry: 'üò†',
  calm: 'üòå'
};

const DIARY_BIN_ID = '680c72658561e97a5007df6e';  // ‚Üê ÊõøÊç¢‰∏∫ÂÆûÈôÖBin ID
const DIARY_API_KEY = '$2a$10$9u9AY94zM2cw7CG4tHCk8uHyPoAd5jyUKSiWVKPhGBPZiKGXspf/y'; // ‚Üê ÊõøÊç¢‰∏∫ÂÆûÈôÖSecret Key
const DIARY_ENDPOINT = `https://api.jsonbin.io/v3/b/${DIARY_BIN_ID}`;

// ÂàùÂßãÂåñÂØåÊñáÊú¨ÁºñËæëÂô®
if (typeof quill === 'undefined') {
  var quill = new Quill('#editor', {
    theme: 'snow',
    modules: {
      toolbar: '#toolbar'
    },
    placeholder: 'ËÆ∞ÂΩïÂ±û‰∫é‰Ω†ÁöÑÈ≠îÊ≥ïÊó∂Âàª...‚ú®'
  });
}

// Â§ÑÁêÜÊó•ËÆ∞‰øùÂ≠ò
document.querySelector('.save-button').addEventListener('click', async () => {
  const content = quill.root.innerHTML;
  const weather = document.getElementById('weather').value;
  const mood = document.getElementById('mood').value;

  // Ê∑ªÂä†ÂÖÉÁ¥†Â≠òÂú®ÊÄßÊ£ÄÊü•
  if(!document.querySelector('.save-button')) {
    console.error('‰øùÂ≠òÊåâÈíÆÂÖÉÁ¥†Êú™ÊâæÂà∞');
    return;
  }

  try {
    // Ê∑ªÂä†ÁΩëÁªúËøûÊé•Ê£ÄÊµã
    if(!navigator.onLine) {
      alert('‚ö†Ô∏è ÁΩëÁªúËøûÊé•‰∏çÂèØÁî®');
      return;
    }

    // Ëé∑ÂèñÁé∞ÊúâÊó•ËÆ∞ÔºàÊ∑ªÂä†Ë∂ÖÊó∂Êú∫Âà∂Ôºâ
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(DIARY_ENDPOINT, {
      headers: {'X-Master-Key': `${DIARY_API_KEY}`},
      signal: controller.signal
    });
    clearTimeout(timeoutId);

    // Ê∑ªÂä†HTTPÁä∂ÊÄÅÊ£ÄÊü•
    if(!response.ok) {
      const errorData = await response.text();
      console.error('APIËØ∑Ê±ÇÂ§±Ë¥•:', {
        status: response.status,
        headers: response.headers,
        errorData
      });
      throw new Error(`APIËØ∑Ê±ÇÂ§±Ë¥•: ${response.status}`);
    }

    const { record: { diaries } } = await response.json();

    // Ê∑ªÂä†Êñ∞Êó•ËÆ∞
    const updateResponse = await fetch(DIARY_ENDPOINT, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'X-Master-Key': DIARY_API_KEY,
        'X-Bin-Versioning': 'false'
      },
      body: JSON.stringify({
          content,
          weather,
          mood,
          created_at: new Date().toISOString()
        })
    });

    if (!updateResponse.ok) {
      const errorData = await updateResponse.json();
      const errorMap = {
        400: 'ËØ∑Ê±ÇÊ†ºÂºèÈîôËØØÔºåËØ∑Ê£ÄÊü•Êó•ËÆ∞ÂÜÖÂÆπ',
        401: 'APIÂØÜÈí•Êó†Êïà',
        403: 'Â≠òÂÇ®Á©∫Èó¥‰∏çË∂≥ÊàñÊùÉÈôêÈôêÂà∂',
        404: 'Êó•ËÆ∞Â≠òÂÇ®Á©∫Èó¥‰∏çÂ≠òÂú®',
        413: 'Êó•ËÆ∞ÂÜÖÂÆπË∂ÖÂá∫Â≠òÂÇ®ÈôêÂà∂',
        'Content-Type': 'ÈúÄË¶ÅËÆæÁΩÆ Content-Type ‰∏∫ application/json',
        'Invalid Bin Id': 'Êèê‰æõÁöÑ Bin ID Êó†Êïà',
        'Bin cannot be blank': 'ËØ∑Ê±Ç‰ΩìÈúÄË¶ÅÂåÖÂê´ JSON Êï∞ÊçÆ',
        'Schema Doc Validation Mismatch': 'JSON Êï∞ÊçÆ‰∏é Schema ÊñáÊ°£‰∏çÂåπÈÖç'
      };
      throw new Error(errorMap[updateResponse.status] || errorMap[errorData.message] || `ÊúçÂä°Âô®ÈîôËØØ: ${updateResponse.status}`);
    }

    alert('Êó•ËÆ∞‰øùÂ≠òÊàêÂäüÔºÅ‚ú®');
    window.location.reload();
  } catch (error) {
    console.error('ËØ¶ÁªÜÈîôËØØÊó•Âøó:', {
      message: error.message,
      stack: error.stack,
      requestHeaders: {
        'Content-Type': 'application/json',
        'X-Master-Key': '***'+DIARY_API_KEY.slice(-6),
        'X-Bin-Versioning': 'false'
      },
      responseStatus: error.response?.status,
      responseHeaders: error.response?.headers
    });
    console.error('ÂÆåÊï¥ÈîôËØØ‰ø°ÊÅØ:', {
  message: error.message,
  stack: error.stack,
  requestInfo: error.request
});
alert(`È≠îÊ≥ïÂ§±ÊïàÂï¶ÔºÅ‚ú®\nÈîôËØØÂéüÂõ†: ${error.message}\nËØ∑Êà™ÂõæÊéßÂà∂Âè∞ËÅîÁ≥ªÁÆ°ÁêÜÂëò`);
    console.error('ËØ∑Ê±ÇÂÖÉÊï∞ÊçÆ:', {
      url: DIARY_ENDPOINT,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'X-Master-Key': '***'+DIARY_API_KEY.slice(-6),
        'X-Bin-Versioning': 'false'
      },
      payload_size: `${JSON.stringify(body).length} bytes`
    });
  }
});

// Âä†ËΩΩÂéÜÂè≤Êó•ËÆ∞
async function loadDiaries() {
  try {
    const response = await fetch(`${DIARY_ENDPOINT}/latest?meta=false`, {
      headers: {
        'X-Master-Key': DIARY_API_KEY,
        'Content-Type': 'application/json',
        'X-Bin-Meta': 'false'
      }
    });
    
    if (!response.ok) {
      const errorBody = await response.text();
      const errorMap = {
        400: 'APIËØ∑Ê±ÇÂ§±Ë¥•',
        401: 'ËÆ§ËØÅÂ§±Ë¥•',
        403: 'ÊùÉÈôê‰∏çË∂≥',
        404: 'Êó•ËÆ∞‰∏çÂ≠òÂú®'
      };
      console.error('Ëé∑ÂèñÊó•ËÆ∞Â§±Ë¥•:', {
        status: response.status,
        headers: Object.fromEntries(response.headers.entries()),
        errorBody
      });
      throw new Error(errorMap[response.status] || `APIËØ∑Ê±ÇÂ§±Ë¥•: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    if (!data?.record) throw new Error('Êó†ÊïàÂìçÂ∫îÊ†ºÂºè');

    const diaries = data.record.diaries;
    const container = document.querySelector('.diary-list');
    diaries.reverse().forEach(diary => {
      const card = document.createElement('div');
      card.className = 'diary-card card';
      card.innerHTML = `
        <div class="diary-meta">
          <span class="weather">${weatherEmoji[diary.weather]}</span>
          <span class="mood">${moodEmoji[diary.mood]}</span>
          <span class="date">${new Date(diary.created_at).toLocaleString()}</span>
        </div>
        <div class="diary-content">${diary.content}</div>
      `;
      container.prepend(card);
    });
  } catch (error) {
    console.error('Âä†ËΩΩÂ§±Ë¥•:', {
      message: error.message,
      stack: error.stack,
      url: `${DIARY_ENDPOINT}/latest?meta=false`,
      method: 'GET',
      headers: {
        'X-Master-Key': '***'+DIARY_API_KEY.slice(-6),
        'Content-Type': 'application/json',
        'X-Bin-Meta': 'false'
      }
    });
  }
}

// ÂàùÂßãÂåñÂä†ËΩΩ
window.addEventListener('DOMContentLoaded', loadDiaries);